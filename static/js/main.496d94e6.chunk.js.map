{"version":3,"sources":["App.jsx","index.js","logo.svg"],"names":["App","props","fetchMoreData","a","fetch","res","json","status","setState","state","users","results","insertMore","finalUsers","lastIndex","length","current","remainingItems","hasMore","array","i","push","indexOf","concat","slice","this","cards","map","item","className","key","src","picture","large","alt","img","style","width","dataLength","next","loader","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"+YAyHeA,E,kDAnHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,cAbmB,sBAaH,8BAAAC,EAAA,sEACIC,MAAM,0CADV,cACRC,EADQ,gBAEKA,EAAIC,OAFT,OAERA,EAFQ,OAGC,MAAfD,EAAIE,QACF,EAAKC,SAAL,eAEO,EAAKC,MAAMC,MAFlB,CAGIA,MAAM,YAAKJ,EAAKK,YAElB,WACE,EAAKC,gBAVG,2CAbG,EA8BnBA,WAAa,WAAO,IAAD,EACa,EAAKH,MAA3BC,EADS,EACTA,MAAOG,EADE,EACFA,WACXC,EAAYD,EAAWE,OACvBC,EAAU,EAEVC,EAAiB,GAGrB,GAFAJ,EAAWE,SAAWL,EAAMK,QAC1B,EAAKP,SAAL,eAAmB,EAAKC,MAAxB,CAA+BS,SAAS,OACtCL,EAAWE,OAASL,EAAMK,QA+BvB,OAAO,EA9BZ,GAAID,GAAa,EAAG,CAElB,IADA,IAAIK,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAErBD,EAAME,KAAKX,EAAMU,IAEnB,EAAKZ,SAAL,eAAmBK,EAAnB,CAA+BA,WAAYM,UAI3C,GADUT,GADVM,EAAUH,EAAWS,QAAQT,EAAWC,EAAY,IAAM,GAChC,KAAM,EACnB,CAEX,IADA,IAAIK,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAErBD,EAAME,KAAKX,EAAMM,EAAUI,IAE7B,EAAKZ,SAAL,eACKK,EADL,CAEEA,WAAYA,EAAWU,OAAOJ,WAGhCF,EAAiBP,EAAMc,MAAMR,GAE7B,EAAKR,SAAL,eACK,EAAKC,MADV,CAEEI,WAAYA,EAAWU,OAAON,GAC9BC,SAAS,MA9DjB,EAAKT,MAAQ,CACXC,MAAO,GACPG,WAAY,GACZK,SAAS,GANM,E,gEAUjBO,KAAKvB,kB,+BA6DG,IACAW,EAAeY,KAAKhB,MAApBI,WACFa,EACJb,GACAA,EAAWc,KAAI,SAACC,EAAMR,GACpB,OACE,yBAAKS,UAAU,WAAWC,IAAKV,GAC7B,yBAAKS,UAAU,aACb,yBAAKE,IAAKH,EAAKI,QAAQC,MAAOC,IAAI,UAK5C,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACb,yEACA,0FACA,yBAAKE,IAAKI,IAAKD,IAAI,aAAaE,MAAO,CAAEC,MAAO,QAChD,2BACE,+BACE,4CAGJ,uBAAGR,UAAU,8CAGjB,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACES,WAAYzB,EAAWE,OACvBwB,KAAMd,KAAKb,WACXM,QAASO,KAAKhB,MAAMS,QACpBsB,OAAQ,0CACRX,UAAU,8BAETH,S,GA5GKe,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCLjDC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.496d94e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport \"./App.css\";\r\nimport img from \"./logo.svg\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      users: [], //Master array\r\n      finalUsers: [],\r\n      hasMore: true,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.fetchMoreData();\r\n  }\r\n  //Fetching data at once of 500 users\r\n  fetchMoreData = async () => {\r\n    const res = await fetch(\"https://randomuser.me/api/?results=500\");\r\n    const json = await res.json();\r\n    res.status === 200 &&\r\n      this.setState(\r\n        {\r\n          ...this.state.users,\r\n          users: [...json.results],\r\n        },\r\n        () => {\r\n          this.insertMore();\r\n          // console.log(this.state.users, \"users\");\r\n        }\r\n      );\r\n  };\r\n\r\n  //Pushing 5 users to new array from master array\r\n  insertMore = () => {\r\n    const { users, finalUsers } = this.state;\r\n    let lastIndex = finalUsers.length;\r\n    let current = 0;\r\n    let hasNext = true;\r\n    let remainingItems = [];\r\n    finalUsers.length === users.length &&\r\n      this.setState({ ...this.state, hasMore: false });\r\n    if (finalUsers.length < users.length) {\r\n      if (lastIndex <= 0) {\r\n        let array = [];\r\n        for (let i = 0; i < 5; i++) {\r\n          // finalUsers = [...finalUsers, user[i]]\r\n          array.push(users[i]);\r\n        }\r\n        this.setState({ ...finalUsers, finalUsers: array });\r\n      } else {\r\n        current = finalUsers.indexOf(finalUsers[lastIndex - 1]) + 1;\r\n        hasNext = users[current + 4] || false;\r\n        if (hasNext) {\r\n          let array = [];\r\n          for (let i = 0; i < 5; i++) {\r\n            // finalUsers = [...finalUsers, users[current + i]]\r\n            array.push(users[current + i]);\r\n          }\r\n          this.setState({\r\n            ...finalUsers,\r\n            finalUsers: finalUsers.concat(array),\r\n          });\r\n        } else {\r\n          remainingItems = users.slice(current);\r\n          // finalUsers = [...finalUsers, ...remainingItems]\r\n          this.setState({\r\n            ...this.state,\r\n            finalUsers: finalUsers.concat(remainingItems),\r\n            hasMore: false,\r\n          });\r\n        }\r\n      }\r\n    } else return false;\r\n  };\r\n  render() {\r\n    const { finalUsers } = this.state;\r\n    const cards =\r\n      finalUsers &&\r\n      finalUsers.map((item, i) => {\r\n        return (\r\n          <div className=\"card m-3\" key={i}>\r\n            <div className=\"card-body\">\r\n              <img src={item.picture.large} alt=\"\" />\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"container\">\r\n            <h1>Infinite Scroll without pagination in api</h1>\r\n            <h3>Fetching 500 users data at once and showing them on scroll</h3>\r\n            <img src={img} alt=\"react_logo\" style={{ width: \"8%\" }} />\r\n            <p>\r\n              <small>\r\n                <em>dev@subhom</em>\r\n              </small>\r\n            </p>\r\n            <i className=\"fas fa-long-arrow-alt-down fa-2x bounce\"></i>\r\n          </div>\r\n        </header>\r\n        <div className=\"container\">\r\n          <InfiniteScroll\r\n            dataLength={finalUsers.length}\r\n            next={this.insertMore}\r\n            hasMore={this.state.hasMore}\r\n            loader={<h4>Loading...</h4>}\r\n            className=\"row justify-content-center\"\r\n          >\r\n            {cards}\r\n          </InfiniteScroll>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}